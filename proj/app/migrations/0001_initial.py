# Generated by Django 4.2.7 on 2023-12-17 21:46

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('person_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('gender', models.CharField(choices=[('F', 'Female'), ('M', 'Male')], max_length=20)),
                ('middle_name', models.CharField(max_length=100)),
                ('role', models.CharField(max_length=300)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('is_logged_in', models.BooleanField()),
                ('groups', models.ManyToManyField(related_name='User', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='entry_record',
            fields=[
                ('entry_record_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('reason_for_entry', models.CharField(max_length=300)),
                ('entry_date', models.DateTimeField(auto_now_add=True)),
                ('out_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='vehicle',
            fields=[
                ('vehicle_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('vehicle_color', models.CharField(max_length=100)),
                ('vehicle_model', models.CharField(max_length=200)),
                ('vehicle_state', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='stranger',
            fields=[
                ('person_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('gender', models.CharField(choices=[('F', 'Female'), ('M', 'Male')], max_length=20)),
                ('middle_name', models.CharField(max_length=100)),
                ('is_banned', models.BooleanField()),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('cars', models.ManyToManyField(to='app.vehicle')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='session',
            fields=[
                ('session_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('login_time', models.DateTimeField(auto_now_add=True)),
                ('logout_time', models.DateTimeField(auto_now=True)),
                ('IP_address', models.GenericIPAddressField()),
                ('device_info', models.CharField(max_length=400)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='security_note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.datetime.now)),
                ('reason', models.CharField(max_length=1000)),
                ('entry_record_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.entry_record')),
                ('stranger_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.stranger')),
            ],
        ),
        migrations.AddField(
            model_name='entry_record',
            name='stranger_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.stranger'),
        ),
        migrations.AddConstraint(
            model_name='security_note',
            constraint=models.UniqueConstraint(fields=('entry_record_id', 'stranger_id'), name='entry_record_stranger_id'),
        ),
    ]
